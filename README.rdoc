=The Factory

The Factory is a module that has three methods for each model: +build_model+, +create_model+ and +valid_model_attributes+.
These methods create objects in a valid state, with default attributes and associations. When using the +create_model+ and +build_model+ methods, you can pass in a hash to override any of the default attributes if needed.
Typically, you should create a file named 'factories.rb' in either the spec or test directory in your project to declare factory methods and default attributes.
It will be loaded during plugin initialization (see init.rb). You could also explicitly require it from test_helper.rb


An example factories.rb file:

  factory :user, :name => "default name"

This would define methods named +build_user+, +create_user+, and +valid_user_attributes+ to be available in any Object in the project.
You could call
  create_user( :name => "a different name" )
if you wanted to override the default valid attributes.


A more complicated example:

  factory :role, :title => "role title"
  
  factory :user, {
    :name => "user name",
    :login => "$UNIQUE(7)",                      # the $UNIQUE(n) magic variable interpolates to a unique string of length n
    :email => "user_$COUNTER@email.com",         # the $COUNTER magic variable interpolates to an incremental number, beginning with 1
    :role => :belongs_to_model,
    :created_at => lambda { Time.zone.now - 7 }  # lazy evaluation
  }
  
  factory :order, {
    :quantity => 5,
    :price => 500,
    :user => :belongs_to_model
  }

This will make nine methods:
+build_role+, +create_role+, +valid_role_attributes+, +build_user+, +create_user+, +valid_user_attributes+, +build_order+, +create_order+, and +valid_order_attributes+

+default_model_attributes+ is also available as an alias to +valid_model_attributes+.

Note that :created_at is passed a lambda block, which will be evaluated at object creation, rather than at factory definition.

A value of :belongs_to_model on an attribute adds logic to call +create_+ or +build_+, appropriately.
For example:
+build_user+ will call :role => build_role, while +create_user+ will call :role => create_role.
+valid_user_attributes+ will call +build_role+.
In this way, models are not saved to the database unnecessarily.


Note that if you pass a foreign key attribute as a build or create override, the corresponding default object will not be constructed.
For example:
  create_user( :role_id => 1 ) # will not call create_role.

There are also two magic variables: $UNIQUE(), and $COUNTER. See the comments in the above example for more info.

The Factory idea was inspired completely by Dan Manges:
  http://www.dcmanges.com/blog/38


=The FactoryWorker

The FactoryWorker functionality is not finished yet, but it works well enough.

If you create a file named 'factory_workers.rb' in either your spec or test directory, you can define snippets of code that can be ran at anytime, anywhere in your tests (this may not be true in the future, I may limit where it can be run, iono). 

A factory worker is defined as so:

  factory_worker :name do
    # any ruby code you want
  end

Then, in your tests you can call 'worker :name' to run the ruby code contained in the worker.

My current use for this is populating the database with salable and non-salable objects and looks something like this:

  factory_worker :salable_and_non_salable_products do
    create_variant( :sku => "1" )
    create_variant( :sku => "2" )
    create_variant( :sku => "3", :in_stock => false )
    create_variant( :sku => "4", :in_stock => false )
  end

The +create_variant+ method would provided by my factory setup, and creates a valid product with associated colors, sizes, and other options that I need. Now, I have 4 products in the database, 2 are in stock and 2 are not. So, in my test: find(:salable).length.should == 2

And it does.

Similar to rake task dependencies, you can chain workers together like this:

  factory_worker :first do
    puts "I am first"
  end
  
  factory_worker :second => :first do
    puts "I am second"
  end
  
  factory_worker :third => :second do
    puts "I am third"
  end

If you call 'worker :third', it should output:

  I am first
  I am second
  I am third

You can also chain workers like this:
  factory_worker :several => [ :first, :second ]

and even add dependencies to the chain in further statements
  factory_worker :several => [ :third ]
